version: '3.1'

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.9
    restart: always
    # Enables the web UI and tells Traefik to listen to docker
    command:
      # - '--api.insecure=true'
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:${APP_BASE_PORT}"
      - "--entrypoints.db.address=:5432" # PostgreSQL endpoint
    ports:
      # The HTTP port
      - "${APP_BASE_PORT}:${APP_BASE_PORT}"
      # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_API_URL: 'http://${APP_BASE_URL}:${APP_BASE_PORT}/api'
    restart: always
    depends_on:
      - api
      - reverse-proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`${APP_BASE_URL}`)"
      - "traefik.http.services.client.loadbalancer.server.port=80"
  api:
    build: ./server
    restart: always
    depends_on:
      - db
      - reverse-proxy
      - valhalla
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${APP_BASE_URL}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.middlewares=api-stripprefix"
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.services.api.loadBalancer.server.port=8000"
    volumes:
      - ./server/:/usr/src/app:ro
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DSN=postgresql://postgres:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
  db:
    image: pgrouting/pgrouting
    restart: always
    ports:
      - 5432:5432
    labels:
      - "traefik.enable=true"
      # routers
      - "traefik.tcp.routers.db.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.db.entryPoints=db"
      - "traefik.tcp.routers.db.service=db"
      # services (needed for TCP)
      - "traefik.tcp.services.db.loadbalancer.server.port=5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
  valhalla:
    image: gisops/valhalla:latest
    restart: always
    ports:
      - "8002:8002"
    volumes:
      - ./valhalla/:/custom_files
    environment:
      # The tile_file must be located in the `custom_files` folder.
      # The tile_file has priority and is used when valid.
      # If the tile_file doesn't exist, the url is used instead.
      # Don't blank out tile_url when you use tile_file and vice versa.
      - tile_urls=${OSM_PBF}
      # Get correct bounding box from e.g. https://boundingbox.klokantech.com/
      # - min_x=50
      # - min_y=16
      # - max_x=60
      # - max_y=27
      - use_tiles_ignore_pbf=True
      - force_rebuild=False
      - force_rebuild_elevation=False
      - build_elevation=False
      - build_admins=True
      - build_time_zones=True

volumes:
  postgres-data:
